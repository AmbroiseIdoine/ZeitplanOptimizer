!@encoding CP1252
model "ModelName"
options noimplicit, explterm
uses "mmxprs"; !gain access to the Xpress-Optimizer solver


parameters
	LehrerAnzahlStrafe=2;
	GrosseStrafe=100;
	KlassenLehrerGewicht=8;
	TandemLehrerGewicht=3;
	PartnerLehrerGewicht=1;
	WechselGewicht=4;
	SportGewicht=1;
	DataFile = "./school_data.dat";
	OutputFile = "./X_res.csv";
	LogFile= "./model_log.txt";
	max_runtime = 200;
	max_rel_gap = 0.05; !not used for the moment
end-parameters

declarations
	nLehr: integer ;
	nFach: integer ;
	nZeit: integer ;
	nKlas: integer ;
end-declarations

initializations from DataFile
	nLehr;
	nFach;
	nZeit;
	nKlas;
end-initializations

!main index sets
declarations
	Lehrer: set of string ;
	Faecher: set of string ;
	Zeitslots = 1..nZeit;
	Klassen: set of string ;
	x: dynamic array(Faecher,Klassen,Lehrer,Zeitslots) of mpvar;
end-declarations

initializations from DataFile
	Lehrer;
	Faecher;
	Klassen;
end-initializations

!condition sets
declarations
	nUbergreifendMax: integer;
	nVorgabenMax: integer;
	nRaum: integer ;
end-declarations

initializations from DataFile
	nUbergreifendMax;
	nVorgabenMax;
	nRaum;
end-initializations

declarations
	Raume = 1..nRaum;
	
	!in Bezug auf lehrer
	LehrerFaecher: array(Lehrer) of set of string ;
	ArbeitZeit : array(Lehrer) of integer;
	LehrerVerfugbar: dynamic array(Lehrer) of set of integer ;
	
	!in Bezug auf klassen
	KlassenLehrer: dynamic array(Klassen) of string ;
	TandemLehrer: dynamic array(Klassen) of string ;
	PartnerLehrer: dynamic array(Klassen) of set of string;
	UnterrichtStunden: array(Klassen, Faecher) of real ;
	KlassenFaecher: array(Klassen) of set of string ; 
	
	!in Bezug auf faecher:
	FachDauer: array(Faecher) of integer ;
	TandemNummer: array(Faecher) of integer;	!wie viele Tandemlehrer gebraucht werden
	Gleichgultig: array(Klassen) of set of set of string;	!faecher die umgetauscht werden koennen
	GleichgultigStunden: array(Klassen) of set of real ;	!wie viele stunden muessen insgesamt gemacht werden fuer die letzigen Gruppen
	Ubergreifend: dynamic array(Faecher,1..nUbergreifendMax) of set of string ; !Klassen zu die ein Fach zusammen unterrichtet wird
	GeteilteFach: array(Faecher) of integer ;	!in wie viele Gruppe soll die Klasse geteilt sein, um diesen Fach zu unterrichten
	GleichzeitigGeteilteFach: set of string ; 	!wenn die Klasse geteilt wird, sollten diese Faecher trozdem gleichzeitig unterrichtet werden
	GleichzeitigFach: dynamic array(Faecher) of string ;	!Faecher, die gleichzeitig unterrichtet werden
	
	!in Bezug auf Zeitslots
	KlassenTage: array(Klassen) of array(1..5) of integer ;
	KlassenTageEnde: array(Klassen) of set of integer ;
	KlassenZeiten: array(Klassen,Zeitslots) of boolean ;
	TagAnfang: array(1..5) of integer;
	Woche: array(1..5) of integer ;
	
	!in Bezug auf Raeume
	RaumFaecher: array(Raume) of set of string ;
	RaumVerfugbar: array(Raume,Zeitslots) of integer ;
	
	!Vorgaben
	Vorgaben: dynamic array(Klassen,1..nVorgabenMax) of set of string ;
	VorgabenMitLehrer: dynamic array(Klassen,Lehrer,1..nVorgabenMax) of set of string ;
	VorgabenZeiten: dynamic array(Klassen,1..nVorgabenMax) of set of integer ;
	VorgabenMLZeiten: dynamic array(Klassen,Lehrer,1..nVorgabenMax) of set of integer ;
	!Andere Variable
	klassetemp : set of string ;
	G : set of string;
	def_out: integer;
end-declarations

initializations from DataFile
	LehrerFaecher ;
	ArbeitZeit  ;
	LehrerVerfugbar ;
	
	KlassenLehrer ;
	TandemLehrer ;
	PartnerLehrer;
	UnterrichtStunden ;
	KlassenFaecher ;
	
	FachDauer ;
	TandemNummer ;
	Gleichgultig ;
	GleichgultigStunden ;
	Ubergreifend ;
	GeteilteFach ;
	GleichzeitigGeteilteFach ;
	GleichzeitigFach ;
	
	KlassenTage ;
	KlassenTageEnde ;
	KlassenZeiten ;
	Woche ;
	TagAnfang ;
	
	RaumFaecher ;
	RaumVerfugbar ;
	
	Vorgaben ;
	VorgabenZeiten ;
	VorgabenMitLehrer ;
	VorgabenMLZeiten ;
end-initializations

! Modell


! Erstellung der Variablen
! Erstelle nur variablen, bei denen es ueberhaupt moeglich ist, dass sie den Wert 1 annehmen
forall (k in Klassen, l in Lehrer, z in Zeitslots|KlassenZeiten(k,z)) do
	forall (f in LehrerFaecher(l)) do 
	    ! waehle nur variablen fuer Faecher, die die Klasse ueberhaupt hat
		if not f in KlassenFaecher(k) then next; end-if
		! Beachte die Dauer von Blockstunden: erstelle nur Variable fuer erste von den Blockstunden??
		if(FachDauer(f)>1)then
			forall(t in z+1..minlist(nZeit,z+FachDauer(f)-1))do
				if not KlassenZeiten(k,t) then 
					next 2; 
				end-if
				if(t-1 in KlassenTageEnde(k)) then 
					next 2; 
				end-if
			end-do
		end-if
		! Kein Unterricht mehr nach Schulschluss
		if(z+FachDauer(f)-1>nZeit)then
			next;
		end-if
		! Kein Unterricht, wenn der Lehrer nicht da ist
		if (exists(LehrerVerfugbar(l))) then
			if not (z in LehrerVerfugbar(l)) then next; end-if
		end-if
		! Kein Unterricht, wenn der Raum nicht verfuegbar ist
		forall(r in Raume|f in RaumFaecher(r)) do
			if (RaumVerfugbar(r,z)<=0) then next 2; end-if
		end-do
		! neu !
		if (FachDauer(f)>1) then
			forall(tag in 1..5,i in 1..3)do
				if(z=TagAnfang(tag)+2*i-1)then
					next 2;
				end-if
			end-do
		end-if
		
		! Wenn all dies in Ordnung war, erstelle die Variable
		! f = Fach, k = Klasse, l = Lehrer, z = Zeitslot
		create(x(f,k,l,z));
		x(f,k,l,z) is_binary;
		
	end-do
end-do
	

! Erstelle die Objective Function als linctr
declarations
	objective: linctr;
	lehrerverfuegbar: array(Lehrer, Zeitslots) of linctr; ! Constraintname fuer Lehrer kann nur einen Unterricht machen
	lv: linctr; ! Hilfe fuer obiges
	maxunterricht: array(Klassen,Zeitslots) of linctr; ! Constraintname fuer maximal ein Unterricht
	gleichzeitigCtr: array(Faecher, Klassen, Zeitslots) of linctr; ! Constraitnname fuer gleichzeitige Faecher
	gF: linctr; ! Hilfe fuer obiges
	uebergreifendFach: array(Faecher, Zeitslots, 1..nUbergreifendMax, 1..nKlas) of linctr; ! Constraintname fuer uebergreifende Faecher
	uF: linctr; ! Hilfe fuer obiges
	uebergreifendLehrer: array(Faecher, Zeitslots, 1..nUbergreifendMax, 1..nKlas) of linctr; ! Constraintname fuer uebergreifende Faecher
	mindestUnterricht: array(Faecher,Klassen) of linctr; ! Constraintname fuer jede Klasse muss ihren Unterricht machen
	TandemGebraucht:array(Klassen, Zeitslots) of linctr; ! Constraintname fuer Tandem gebraucht
	maxArbeit:array(Lehrer) of linctr; ! Constraintname fuer Arbeitszeit nicht ueberschreiten
	RaumDa:array(Raume,Zeitslots) of linctr; ! Constraintname fuer Raum verfuegbar
	!glechzeitigCtr: array(Faecher, Klassen, Zeitslots) of linctr;
end-declarations




!#####################
!###               ###
!###  CONSTRAINTS  ###
!###               ###
!#####################

!Vorgaben
forall(k in Klassen, gruppe in 1..nVorgabenMax|exists(Vorgaben(k,gruppe)))do
	forall(z in VorgabenZeiten(k,gruppe))do
		sum(f in Vorgaben(k,gruppe), l in Lehrer, t in maxlist(1,z+1-FachDauer(f))..z) x(f,k,l,t) >=1;
	end-do
end-do 


!Vorgaben mit lehrer
forall(k in Klassen, l in Lehrer, gruppe in 1..nVorgabenMax|exists(VorgabenMitLehrer(k,l,gruppe)))do
	forall(z in VorgabenMLZeiten(k,l,gruppe))do
		sum(f in VorgabenMitLehrer(k,l,gruppe), t in maxlist(1,z+1-FachDauer(f))..z)
			x(f,k,l,t)>=1;
	end-do
end-do 


! Nur ein Unterricht pro Stunde (auﬂer fuer geteilte Faecher)
forall (z in Zeitslots, k in Klassen) do
	maxunterricht(k,z):= sum(f in Faecher, l in Lehrer, t in maxlist(1,z+1-FachDauer(f))..z | f <> "Tandem")(x(f,k,l,t)/GeteilteFach(f)) <= 1;
end-do


! Gleichzeitige Faecher
forall (f in Faecher | exists(GleichzeitigFach(f))) do 
	forall (k in Klassen, z in Zeitslots) do 
	    ! Wenn faecher gleicheitig stattfinden, setze die Summen als gleich
		gleichzeitigCtr(f,k,z):=sum(l in Lehrer) x(f,k,l,z) - sum(l in Lehrer) x(GleichzeitigFach(f),k,l,z)=0;
	end-do
end-do


! Gleichzeitige und geteilte Faecher
declarations
	!Binary variable: ob die Klasse an dieser Zeitslot dieser fach hat
	ggf: dynamic array(GleichzeitigGeteilteFach,Klassen,Zeitslots) of mpvar ;
end-declarations

forall(f in GleichzeitigGeteilteFach, k in Klassen, z in Zeitslots|
	f in KlassenFaecher(k))do
	create(ggf(f,k,z)) ;
	ggf(f,k,z) is_binary ;
	sum(l in Lehrer|f in LehrerFaecher(l)) x(f,k,l,z)/GeteilteFach(f) = ggf(f,k,z);
end-do

! Klassenuebergreifende Faecher
forall(f in Faecher,gruppe in 1..nUbergreifendMax,z in Zeitslots|exists(Ubergreifend(f,gruppe)))do
	klassetemp := Ubergreifend(f,gruppe);
	forall(i in 1..(getsize(klassetemp)-1))do
		uebergreifendFach(f, z, gruppe, i)= sum(l in Lehrer) x(f,klassetemp(i),l,z)-
		sum(l in Lehrer) x(f,klassetemp(i+1),l,z);
	end-do
end-do

! Klassenuebergreifende Faecher brauchen auch den gleichen Lehrer
forall(f in Faecher,gruppe in 1..nUbergreifendMax,l in Lehrer, z in Zeitslots|exists(Ubergreifend(f,gruppe)))do
	klassetemp := Ubergreifend(f,gruppe);
	forall(i in 1..(getsize(klassetemp)-1))do
		uebergreifendLehrer(f, z, gruppe, i)= x(f,klassetemp(i),l,z)- x(f,klassetemp(i+1),l,z);
	end-do
end-do

! Ein lehrer kann nur einen Unterricht geben (auﬂer fuer klassenuebergreifende Faecher)
forall (l in Lehrer, z in Zeitslots) do 
	lv:=0;
	forall (f in LehrerFaecher(l)) do 
		if exists(Ubergreifend(f,1)) then
			lv+=sum(gruppe in 1..nUbergreifendMax|exists(Ubergreifend(f,gruppe)), 
				t in maxlist(1,z+1-FachDauer(f))..z)(
				1/getsize(Ubergreifend(f,gruppe))
				*sum(k in Ubergreifend(f,gruppe))x(f,k,l,t));	
		else
			lv+=sum(k in Klassen, t in maxlist(1,z+1-FachDauer(f))..z)(x(f,k,l,t));
		end-if
	end-do
	lehrerverfuegbar(l,z):=lv<=1;
end-do

!Jeder Klasse muss gewisse UnterrichtStunden machen
forall (k in Klassen, f in Faecher) do
	mindestUnterricht(f,k):=sum(l in Lehrer, z in Zeitslots | exists(x(f,k,l,z)))
		x(f,k,l,z)*FachDauer(f)/GeteilteFach(f) >= UnterrichtStunden(k,f) ;
end-do

!gleichgultige Faecher mussen zusaetzliche Unterrichtstunden machen
declarations
	tempGG: set of set of string;
	tempGGstunde: set of real;
end-declarations

forall(k in Klassen)do
	tempGG:=Gleichgultig(k);
	tempGGstunde:=GleichgultigStunden(k);
	forall(gruppe in 1..getsize(tempGG))do
		sum(l in Lehrer,z in Zeitslots, f in tempGG(gruppe))(x(f,k,l,z)*FachDauer(f)/GeteilteFach(f)) 
		>= tempGGstunde(gruppe) + sum(f in tempGG(gruppe))UnterrichtStunden(k,f);
	end-do
end-do


! Tandemlehrer wird gebraucht
forall (k in Klassen, z in Zeitslots) do 
	TandemGebraucht(k,z):= sum(l in Lehrer) x("Tandem",k,l,z) = 
	sum(f in Faecher, l in Lehrer, t in maxlist(1,z+1-FachDauer(f))..z) 
		TandemNummer(f)*x(f,k,l,t) ;
end-do

function getUbergreifend(f:string,k:string):integer
	returned:=1;
	if exists(Ubergreifend(f,1)) then
		forall(i in 1..nUbergreifendMax|exists(Ubergreifend(f,i)))do
			if (k in Ubergreifend(f,i)) then
				returned:= getsize(Ubergreifend(f,i));
			end-if
		end-do
	end-if
end-function


! Lehrer sollten nicht Ihren Arbeitzeit ueberschreiten
forall (l in Lehrer) do 
	maxArbeit(l):= sum(k in Klassen,f in Faecher, z in Zeitslots) x(f,k,l,z)*FachDauer(f)/getUbergreifend(f,k) <= ArbeitZeit(l);
end-do


! Raum Verfuegbarkeit
forall(r in Raume, z in Zeitslots|RaumVerfugbar(r,z)>0)do
	RaumDa(r,z):= sum(f in RaumFaecher(r),k in Klassen,l in Lehrer, t in maxlist(1,z+1-FachDauer(f))..z)
					(x(f,k,l,t)/getUbergreifend(f,k))<=RaumVerfugbar(r,z);
end-do


! Funktion, um Wechsel in den Klassen zu zaehlen
declarations
	wechselInsgesamt: linctr;
	wl: linctr;
	val: real;
	valS: real;
	sport: linctr;
end-declarations

function wechselLehrer(k:string, l:string, z: integer): integer
	wl:=sum(f in Faecher) sum(t in maxlist(1,z+1-FachDauer(f))..z) x(f,k,l,t)
	+sum(g in Faecher) x(g,k,l,z+1);
	val:= getsol(wl);
	if (val mod 2) > 0 then
		returned:= 1;
	else
		returned:=0;
	end-if
end-function

! Funktion, um zu testen, ob SportW und SportM gleichzeitig ist
function sportGleichzeitig(k: string, z: integer): integer
	sport:= (sum(l in Lehrer|exists( x("SportM",k,l,z))) x("SportM",k,l,z)) + sum(l in Lehrer|exists(x("SportW",k,l,z))) x("SportW",k,l,z);
	valS:= getsol(sport);
	if (valS mod 2) > 0 then
		returned:=0;
	else
		returned:=1;
	end-if
end-function


!############################################
!###                                      ###
!### OBJECTIVE FUNCTION AND MAXIMIZATION  ###
!###                                      ###
!############################################


! Hauptehrer unterrichtet am meisten in seiner eigenen Klasse.
objective += KlassenLehrerGewicht*sum(k in Klassen, f in LehrerFaecher(KlassenLehrer(k)), 
				z in Zeitslots) x(f,k,KlassenLehrer(k),z)*FachDauer(f);


! Auch der Tandemlehrer der Klasse sollte nur in seiner Klasse unterrichten
objective += TandemLehrerGewicht*sum(k in Klassen, f in LehrerFaecher(TandemLehrer(k)), 
				z in Zeitslots) x(f,k,TandemLehrer(k),z)*FachDauer(f);

! Auch eventuelle zusaetzliche Partner sind am liebsten in ihrer Klasse
forall (k in Klassen, pl in PartnerLehrer(k)) do
	objective += PartnerLehrerGewicht*sum(f in LehrerFaecher(pl), 
				z in Zeitslots) x(f,k,pl,z)*FachDauer(f);
end-do

! Minimiere die Zahl der Wechsel in einer Klasse NEU NEU NEU NEU
objective -= WechselGewicht * sum(k in Klassen, l in Lehrer, z in 1..nZeit-1) wechselLehrer(k,l,z)*0.5;

! Belohne, wenn SportM und SportW gleichzeitig stattfinden NEU NEU NEU NEU
objective += SportGewicht * sum(k in Klassen, z in Zeitslots) sportGleichzeitig(k,z);


! Minimiere den Anzahl von Lehrer pro Klasse
! y(k,l) binary variable, ob Lehrer l in Klasse k unterrichtet
declarations
	y : array(Klassen, Lehrer) of mpvar;
end-declarations

forall (k in Klassen, l in Lehrer) do
	y(k,l) is_binary;
end-do

forall(k in Klassen, l in Lehrer) do 
	sum(f in LehrerFaecher(l), z in Zeitslots) x(f,k,l,z) <= ArbeitZeit(l)*y(k,l);
end-do

! Substrahiere Strafen
objective -= LehrerAnzahlStrafe * sum(k in Klassen, l in Lehrer) y(k,l);


! Schalte den Logger ein und maximiere nun den Objective
setparam("XPRS_verbose", true);

declarations
	start_time=timestamp;
	compteur: integer;
	obj: real; 
	bound: real; 
	relgap: real;
end-declarations

compteur:=0;
public procedure stop_time(parent:integer,new:integer,branch:integer)
	compteur+=1;
	if(timestamp>start_time+max_runtime)then
		writeln("Stopping optimizer: time limit reached ( "+max_runtime+"s)");
		stopoptimize(XPRS_STOP_TIMELIMIT);
	end-if
end-procedure

! Das funktioniert nicht
(!public procedure stop_gap(rt:real,at:real,aot:real,abt:real)
	writeln("rt: "+rt);
	if(rt<0.05)then
		stopoptimize(XPRS_STOP_MIPGAP);
	end-if
end-procedure
!)
!setcallback(XPRS_CB_GAPNOTIFY, "stop_gap");

setcallback(XPRS_CB_NEWNODE, "stop_time");
maximize(objective);

!###############################################
!###                                         ###
!###  Relaxieren, wenn Model unzul‰ssig ist  ###
!###                                         ###
!###############################################

declarations
	TandemGebraucht_rel: array(Klassen,Zeitslots) of mpvar;
	RaumDa_rel: dynamic array(Raume,Zeitslots) of mpvar;
	MaxArbeit_rel: array(Lehrer) of mpvar ; 
	MindestUnterricht_rel:array(Faecher,Klassen) of mpvar ;
	relaxation_number: integer;
	log_message: string;
end-declarations

relaxation_number:=0;

if (getprobstat=XPRS_INF) then
	writeln('Original problem ist unzul‰ssig. Es wird versucht, die Bedingung "TandemGebraucht" zu relaxieren');

	! Relaxation von Tandemlehrer
	forall (k in Klassen, z in Zeitslots) do 
		TandemGebraucht(k,z):= sum(l in Lehrer) x("Tandem",k,l,z) + TandemGebraucht_rel(k,z) = 
		sum(f in Faecher, l in Lehrer, t in maxlist(1,z+1-FachDauer(f))..z) 
			TandemNummer(f)*x(f,k,l,t) ;
		TandemGebraucht_rel(k,z)>=0;
		objective-= GrosseStrafe*TandemGebraucht_rel(k,z);
	end-do
	
	maximize(objective);
	relaxation_number+=1;
end-if

if (getprobstat=XPRS_INF) then
	writeln('Original problem ist unzul‰ssig. Es wird versucht, die Bedingung "RaumDa" zu relaxieren');
	
	! Relaxation von Raum Verfuegbarkeit
	forall(r in Raume, z in Zeitslots|RaumVerfugbar(r,z)>0)do
		create(RaumDa_rel(r,z));
		RaumDa(r,z):= sum(f in RaumFaecher(r),k in Klassen,l in Lehrer, t in maxlist(1,z+1-FachDauer(f))..z)
						(x(f,k,l,t)/getUbergreifend(f,k))<=RaumVerfugbar(r,z) + RaumDa_rel(r,z);
		RaumDa_rel(r,z)>=0;
		objective-= GrosseStrafe*RaumDa_rel(r,z);
	end-do
	maximize(objective);
	relaxation_number+=1;
end-if

if (getprobstat=XPRS_INF) then
	writeln('Original problem ist unzul‰ssig. Es wird versucht, die Bedingung "MaxArbeit" zu relaxieren');
	
	! relaxation von MaxArbeit
	forall (l in Lehrer) do 
		maxArbeit(l):= sum(k in Klassen,f in Faecher, z in Zeitslots) x(f,k,l,z)*FachDauer(f)/getUbergreifend(f,k) <= MaxArbeit_rel(l) + ArbeitZeit(l);
		MaxArbeit_rel(l)>=0;
		objective-= GrosseStrafe*MaxArbeit_rel(l);
	end-do
	
	maximize(objective);
	relaxation_number+=1;
end-if

if (getprobstat=XPRS_INF) then
	writeln('Original problem ist unzul‰ssig. Es wird versucht, die Bedingung "MindestUnterricht" zu relaxieren');
	

	! constraint relaxation von MindestUnterricht:
	forall (k in Klassen, f in Faecher) do
		mindestUnterricht(f,k):= sum(l in Lehrer, z in Zeitslots | exists(x(f,k,l,z)))
		x(f,k,l,z)*FachDauer(f)/GeteilteFach(f) + MindestUnterricht_rel(f,k) >= UnterrichtStunden(k,f) ;
		MindestUnterricht_rel(f,k)>=0;
		objective-= GrosseStrafe*MindestUnterricht_rel(f,k);
	end-do

	maximize(objective);
	relaxation_number+=1;
end-if


!##################################################
!###                                            ###
!###  AUSGABE ERSTELLEN UND IN DATEI SCHREIBEN  ###
!###                                            ###
!##################################################


!log file for relaxations
def_out:= getfid(F_OUTPUT);
fopen(LogFile,F_OUTPUT);
writeln("Log message (Besser wenn leer!)\n");
if(relaxation_number>=1)then
	writeln("Das problem war unzul‰ssig\n");
	writeln("Das Anzahl an Tandem lehrer wurde relaxiert");
	forall(k in Klassen, z in Zeitslots| TandemGebraucht_rel(k,z).sol>=1 ) do
		writeln("   Es fehlen "+TandemGebraucht(k,z).sol+" Tandem fuer Klasse "
				+k+" am Zeitslots "+z);
	end-do
end-if
if(relaxation_number>=2)then
	writeln("\nDie Verf¸gbarkeit von R‰umen wurde relaxiert");
	forall(r in Raume, z in Zeitslots|RaumDa_rel(r,z).sol>=1)do
		writeln("   Es fehlen "+RaumDa_rel(r,z).sol+" raume am Zeitpunkt "+z);
	end-do
end-if
if(relaxation_number>=3)then
	writeln("\nDas maximal Arbeitzeit von lehrer wurde relaxiert");
	forall(l in Lehrer|MaxArbeit_rel(l).sol>=1)do
		writeln("   Lehrer "+l+" macht "+MaxArbeit_rel(l).sol+" zu viel");
	end-do
end-if
if(relaxation_number>=4)then
	writeln("\nNicht alle Unterrichte konnten gelehrt werden");
	forall(f in Faecher,k in Klassen|MindestUnterricht_rel(f,k).sol>=1)do
		writeln("   Fur Klasse "+k+" konnten "+MindestUnterricht_rel(f,k).sol+
					" Stunden in Fach "+f+" nicht gelehrt werden");
	end-do
end-if
fselect(def_out);

! Output fuer das File
def_out:= getfid(F_OUTPUT);
fopen(OutputFile,F_OUTPUT);
writeln("Faecher,Klassen,Lehrer,Zeitslots,x");
forall (f in Faecher, k in Klassen, l in Lehrer, z in Zeitslots| exists(x(f,k,l,z))) do
	if (x(f,k,l,z).sol = 1) then
		writeln(""+f+","+k+","+l+","+z+",1");
	end-if
end-do
fselect(def_out);

if (getprobstat=XPRS_OPT) then
	writeln('optimal');
else
	writeln('not optimal');
	exit(1);
end-if




end-model
